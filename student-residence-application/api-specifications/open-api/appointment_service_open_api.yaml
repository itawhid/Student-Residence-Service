openapi: 3.0.0

info:
  title: Appointment Service
  version: 1.0.0 

servers:
  - url: http://{appointment-service-base-uri}/api

tags:
  - name: appointments
    description: Methods for appointment resources
  - name: contractors
    description: Methods for contractor resources

paths:
  /appointments:
    post:
      tags:
        - appointments
      summary: Adds a new appointment
      description: Method to add a new appointment. Users only with Resident role can invoke this method. Move In appointment can only be created with the desired date not before than two (2) weeks before the contract start date. Move Out appointment can only be created with the desired date not before than two (2) weeks before the contract end date.
      requestBody:
        description: Appointment object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseAppointment'
          application/xml:
            schema:
              $ref: '#/components/schemas/BaseAppointment'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        400:
          $ref: '#/components/responses/ValidationFailedError'
        401:
          $ref: '#/components/responses/AuthorizationError'
        412:
          $ref: '#/components/responses/InvalidOperationError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
      - bearerAuth: []

    get:
      tags:
        - appointments
      summary: Retrieves appointments
      description: Method to retrieve multiple appointments. Use allowed query parameters to filter and pagination. Users only with Admin and Caretaker roles can invoke this method.
      parameters:
        - in: query
          name: desiredDate
          description: Desired Date to filter by
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: pageNum
          description: Page number for the pagination.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1 (only if pageSize is present)
        - in: query
          name: pageSize
          description: Page size for the pagination.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 20 (only if pageNum is present)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAppointments'
            application/xml:
              schema:
                $ref: '#/components/schemas/PaginatedAppointments'
        401:
          $ref: '#/components/responses/AuthorizationError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
  
  /appointments/{appointment-id}:
    get:
      tags:
        - appointments
      summary: Retrieves a appointment
      description: Method to retrieve a particular appointment. Users with Admin, Caretaker and Resident roles can invoke this method. Resident users can retreive only their appointments. If a resident user invokes the method to retreive other resident user's appointments then an unaothorized error response (HTTP response code 401) will be thrown.
      parameters:
        - in: path
          name: appointment-id
          description: ID of the appointment to be retreived
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          $ref: '#/components/responses/ResourceNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
        
    patch:
      tags:
        - appointments
      summary: Updates a appointment to accept or deny
      description: Method to accept or deny a particular appointment. Users only with Caretaker role can invoke this method. A appointment can only be accepted or denied before the desired date.
      parameters:
        - in: path
          name: appointment-id
          description: Appointment ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
      responses:
        200:
          description: Successful operation
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          $ref: '#/components/responses/ResourceNotFoundError'
        412:
          $ref: '#/components/responses/InvalidOperationError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []
        
  /contractors/{contractors-user-id}/appointments:
    get:
      tags:
        - contractors
      summary: Retrieves appointments of a contractor
      description: Method to retrieve appointments of a particular contractor. Users with Admin, Caretaker and Resident roles can invoke this method. Resident users can retreive only their appointments. If a resident users invokes the method to retreive other resident user's appointment then an unaothorized error response (HTTP response code 401) will be thrown.
      parameters:
        - in: path
          name: contractors-user-id
          description: ID of the resident user of whom the appointments to be retreived
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentListResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AppointmentListResponse'
        400:
          $ref: '#/components/responses/ValidationFailedError'
        401:
          $ref: '#/components/responses/AuthorizationError'
        404:
          $ref: '#/components/responses/ResourceNotFoundError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    BaseAppointment:
      type: object
      properties:
        contractId:
          type: string
          description: A valid contract user id is required
        contractorsName:
          type: string
        roomNumber:
          type: string
        appointmentType:
          type: string
          enum:
            - MoveIn
            - MoveOut
            - Miscellaneous
        issue:
          type: string
          maxLength: 200
        desiredDate:
          type: string
          format: date
        priority:
          type: string
          enum:
            - Low
            - Normal
            - High
      required:
        - contractId
        - contractorsName
        - roomNumber
        - appointmentType
        - issue
        - desiredDate
        - priority
      xml:
        name: appointment
        
    AppointmentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseAppointment'
        - type: object
      type: object
      properties:
        appointmentId:
          type: string
        status:
          type: string
          enum:
            - Received
            - Accepted
            - Denied
        creadtedBy:
          type: string
        createdOn:
          type: string
        links:
          type: array
          items:
            type: object
            properties:
              href:
                type: string
              rel:
                type: string
      xml:
        name: appointment
        
    AppointmentListResponse:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentResponse'
          xml:
            wrapped: true
      xml:
        name: response
        
    PaginatedAppointments:
      type: object
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentResponse'
          xml:
            wrapped: true
        metadata:
          type: object
          properties:
            previous:
              type: string
            next:
              type: string
            first:
              type: string
            last:
              type: string
      xml:
        name: response

    UpdateAppointmentRequest:
      type: object
      properties:
        operation:
          type: string
          enum:
            - Accept
            - Deny
      required:
        - operation
      xml:
        name: updateRequest

  responses:
    ResourceNotFoundError:
      description: No resource found with the specified ID.
    ValidationFailedError:
      description: Validation failed.
    InvalidOperationError:
      description: Invalid operation.
    AuthorizationError:
      description: Missing/invalid/expired access token or role not valid for the operation.
    InternalServerError:
      description: Internal server error.
